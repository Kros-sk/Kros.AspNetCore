trigger:
  tags:
    include: [ 'aspnetcore-v*', 'mediatr-v*' ]

pool: Default

resources:
  repositories:
    - repository: templates
      type: git
      name: DevShared/Templates

variables:
  - group: Nuget
  - name: buildConfiguration
    value: 'Release'
  - name: project.AspNetCore
    value: 'Kros.AspNetCore'
  - name: project.MediatR
    value: 'Kros.MediatR.Extensions'
  - name: 'project.Current'
    value: ''
  - name: 'project.TestProjectsCount'
    value:  0

steps:
  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.AspNetCore)'
    displayName: 'Set project: $(project.AspNetCore)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/aspnetcore-v')

  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.MediatR)'
    displayName: 'Set project: $(project.MediatR)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/mediatr-v')

  - script: |
      echo No project was specified.
      echo Build must be triggered with correct tag and based on the tag name, the project is selected.
      echo Available tag names and their projects:
      echo   - aspnetcore-v* - Kros.AspNetCore
      echo   - mediatr-v* - Kros.MediatR.Extensions
      exit 1
    displayName: 'Check project name'
    condition: eq(variables['project.Current'], '')

  - task: DotNetCoreCLI@2
    displayName: 'Nuget restore'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration $(BuildConfiguration) --no-restore'

  - powershell: |
      $count = 0
      Get-ChildItem -Path "$env:System_DefaultWorkingDirectory" -Filter "$(project.Current)*test*.csproj" -Recurse -File | ForEach-Object {
        $count = $count + 1
      }
      Write-Host Test projects found: $count
      Write-Output ("##vso[task.setvariable variable=project.TestProjectsCount;]$count")
    displayName: Find Test Projects

  - task: DotNetCoreCLI@2
    displayName: 'Tests'
    condition: gt(variables['project.TestProjectsCount'], 0)
    inputs:
      command: test
      projects: '**/$(project.current)*[Tt]ests*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Pack'
    inputs:
      command: pack
      projects: '**/$(project.current).csproj'

  - task: CopyFiles@2
    displayName: 'Copy package files to staging directory'
    inputs:
      Contents: '**/$(project.current)*.nupkg'
      TargetFolder: '$(build.artifactStagingDirectory)'
      FlattenFolders: true

  - template: steps/nuget-push.yml@templates
    parameters:
      feed: '$(nuget.feed)'
      packages: '$(Build.ArtifactStagingDirectory)/$(project.Current)*.nupkg'
