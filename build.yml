trigger:
  tags:
    include:
      - 'appinsights-v*'
      - 'aspnetcore-v*'
      - 'masstransitaz-v*'
      - 'mediatr-v*'
      - 'problemdetails-v*'
      - 'swagger-v*'

pool: Default

workspace:
  clean: outputs

resources:
  repositories:
    - repository: templates
      type: git
      name: DevShared/Templates

variables:
  - group: Nuget
  - name: buildConfiguration
    value: 'Release'
  - name: project.AppInsights
    value: 'Kros.ApplicationInsights.Extensions'
  - name: project.AspNetCore
    value: 'Kros.AspNetCore'
  - name: project.MassTransitAzure
    value: 'Kros.MassTransit.AzureServiceBus'
  - name: project.MediatR
    value: 'Kros.MediatR.Extensions'
  - name: project.ProblemDetails
    value: 'Kros.ProblemDetails.Extensions'
  - name: project.Swagger
    value: 'Kros.Swagger.Extensions'
  - name: 'project.Current'
    value: ''
  - name: 'project.TestProjectsCount'
    value:  0

steps:
  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.AppInsights)'
    displayName: 'Set project: $(project.AppInsights)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/appinsights-v')

  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.AspNetCore)'
    displayName: 'Set project: $(project.AspNetCore)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/aspnetcore-v')

  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.MassTransitAzure)'
    displayName: 'Set project: $(project.MassTransitAzure)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/masstransitaz-v')

  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.MediatR)'
    displayName: 'Set project: $(project.MediatR)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/mediatr-v')

  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.ProblemDetails)'
    displayName: 'Set project: $(project.ProblemDetails)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/problemdetails-v')

  - powershell: echo '##vso[task.setvariable variable=project.Current]$(project.Swagger)'
    displayName: 'Set project: $(project.Swagger)'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/swagger-v')

  - script: |
      echo No project was specified.
      echo Build must be triggered with correct tag and based on the tag name, the project is selected.
      echo Available tag names and their projects:
      echo   - appinsights-v* - Kros.ApplicationInsights.Extensions
      echo   - aspnetcore-v* - Kros.AspNetCore
      echo   - masstransitaz-v* - Kros.MassTransit.AzureServiceBus
      echo   - mediatr-v* - Kros.MediatR.Extensions
      echo   - problemdetails-v* - Kros.ProblemDetails.Extensions
      echo   - swagger-v* - Kros.Swagger.Extensions
      exit 1
    displayName: 'Check project name'
    condition: eq(variables['project.Current'], '')

  - template: steps/delete-nupkgs.yml@templates

  - task: DotNetCoreCLI@2
    displayName: 'Build'
    inputs:
      command: build
      projects: '**/*.csproj'
      arguments: '--configuration $(BuildConfiguration)'

  - powershell: |
      $count = 0
      Get-ChildItem -Path "$env:System_DefaultWorkingDirectory" -Filter "$(project.Current)*test*.csproj" -Recurse -File | ForEach-Object {
        $count = $count + 1
      }
      Write-Host Test projects found: $count
      Write-Output ("##vso[task.setvariable variable=project.TestProjectsCount;]$count")
    displayName: Find Test Projects

  - template: steps/dotnet-test-and-publish-results.yml@templates
    parameters:
      buildConfiguration: '$(BuildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy package files to staging directory'
    inputs:
      Contents: |
        **/$(project.current)*.nupkg
        **/$(project.current)*.snupkg
      TargetFolder: '$(build.artifactStagingDirectory)'
      FlattenFolders: true

  - template: steps/nuget-push.yml@templates
    parameters:
      feed: '$(nuget.feed)'
      packages: '$(Build.ArtifactStagingDirectory)/$(project.Current)*.nupkg'
